#define FROM_MASTER_TO_SLAVE 1
#define FROM_SLAVE_TO_MASTER 8

double A[A_ROWS][A_COLUMNS];
double B[B_ROWS][B_COLUMNS];
double C[A_ROWS][B_COLUMNS];

double start_time, end_time;

int low_bound, upper_bound, portion;
int rank, size, i, j, k, rtemp, i1;
MPI_Status status;
MPI_Request request;
double avr_time;

void initAB()
{
    for (i = 0; i < A_ROWS; i++) {
        for (j = 0; j < A_COLUMNS; j++) {
            A[i][j] = i + j;
        }
    }
    for (i = 0; i < B_ROWS; i++) {
        for (j = 0; j < B_COLUMNS; j++) {
            B[i][j] = i*j;
        }
    }
}

int main(int argc, char *argv[])
{
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    avr_time = 0;
    for (i1=0;i1<3;i1++) {
        if (rank == 0) {
            initAB();
            start_time = MPI_Wtime();
            for (i = 1; i < size; i++) {
                portion = (A_ROWS / (size - 1));
                low_bound = (i - 1) * portion;
                if (((i + 1) == size) && ((A_ROWS % (size - 1)) != 0)) {
                } else {
                    upper_bound = low_bound + portion;
                }
                MPI_Isend(&low_bound, 1, MPI_INT, i, FROM_MASTER_TO_SLAVE, MPI_COMM_WORLD, &request);
                MPI_Isend(&upper_bound, 1, MPI_INT, i, FROM_MASTER_TO_SLAVE + 1, MPI_COMM_WORLD, &request);
                MPI_Isend(&A[low_bound][0], (upper_bound - low_bound) * A_COLUMNS, MPI_DOUBLE, i, FROM_MASTER_TO_SLAVE + 2, MPI_COMM_WORLD, &request);
            }
        }
        MPI_Bcast(&B, B_ROWS*B_COLUMNS, MPI_DOUBLE, 0, MPI_COMM_WORLD);
        if (rank > 0) {
            MPI_Recv(&low_bound, 1, MPI_INT, 0, FROM_MASTER_TO_SLAVE, MPI_COMM_WORLD, &status);
            MPI_Recv(&upper_bound, 1, MPI_INT, 0, FROM_MASTER_TO_SLAVE + 1, MPI_COMM_WORLD, &status);
            MPI_Recv(&A[low_bound][0], (upper_bound - low_bound) * A_COLUMNS, MPI_DOUBLE, 0, FROM_MASTER_TO_SLAVE + 2, MPI_COMM_WORLD, &status);
            for (i = low_bound; i < upper_bound; i++) {
                for (j = 0; j < B_COLUMNS; j++) {
                    rtemp = 0;
                    for (k = 0; k < B_ROWS; k++) {
                         rtemp += (A[i][k] * B[k][j]);
                    }
                    C[i][j] = rtemp;
                }
            }
            MPI_Isend(&low_bound, 1, MPI_INT, 0, FROM_SLAVE_TO_MASTER, MPI_COMM_WORLD, &request);
            MPI_Isend(&upper_bound, 1, MPI_INT, 0, FROM_SLAVE_TO_MASTER + 1, MPI_COMM_WORLD, &request);
            MPI_Isend(&C[low_bound][0], (upper_bound - low_bound) * B_COLUMNS, MPI_DOUBLE, 0, FROM_SLAVE_TO_MASTER + 2, MPI_COMM_WORLD, &request);
        }
        if (rank == 0) {
            for (i = 1; i < size; i++) {
                MPI_Recv(&low_bound, 1, MPI_INT, i, FROM_SLAVE_TO_MASTER, MPI_COMM_WORLD, &status);
                MPI_Recv(&upper_bound, 1, MPI_INT, i, FROM_SLAVE_TO_MASTER + 1, MPI_COMM_WORLD, &status);
                MPI_Recv(&C[low_bound][0], (upper_bound - low_bound) * B_COLUMNS, MPI_DOUBLE, i, FROM_SLAVE_TO_MASTER + 2, MPI_COMM_WORLD, &status);
            }
            end_time = MPI_Wtime();
            avr_time += end_time - start_time;
        }
    }
    MPI_Finalize();
    if (rank==0)
        printf("[%d, %d] * [%d, %d] : %f\n", A_ROWS, A_COLUMNS,B_ROWS, B_COLUMNS, avr_time/3);
    return 0;
}
