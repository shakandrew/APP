#define MASTER_TO_SLAVE_TAG 1
#define SLAVE_TO_MASTER_TAG 8
void makeAB();
int rank;
int size;
int i, j, k, rtemp, i1;
double mat_a[NUM_ROWS_A][NUM_COLUMNS_A];
double mat_b[NUM_ROWS_B][NUM_COLUMNS_B];
double mat_result[NUM_ROWS_A][NUM_COLUMNS_B];
double start_time, end_time;
int low_bound, upper_bound;
int portion;
MPI_Status status;
MPI_Request request;
double avr_time;
int main(int argc, char *argv[])
{

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    avr_time = 0;
    for (i1=0;i1<3;i1++) {
        if (rank == 0) {
            makeAB();
            start_time = MPI_Wtime();
            for (i = 1; i < size; i++) {
                portion = (NUM_ROWS_A / (size - 1));
                low_bound = (i - 1) * portion;
                if (((i + 1) == size) && ((NUM_ROWS_A % (size - 1)) != 0)) {
                } else {
                    upper_bound = low_bound + portion;
                }
                MPI_Isend(&low_bound, 1, MPI_INT, i, MASTER_TO_SLAVE_TAG, MPI_COMM_WORLD, &request);
                MPI_Isend(&upper_bound, 1, MPI_INT, i, MASTER_TO_SLAVE_TAG + 1, MPI_COMM_WORLD, &request);
                MPI_Isend(&mat_a[low_bound][0], (upper_bound - low_bound) * NUM_COLUMNS_A, MPI_DOUBLE, i, MASTER_TO_SLAVE_TAG + 2, MPI_COMM_WORLD, &request);
            }
        }
        MPI_Bcast(&mat_b, NUM_ROWS_B*NUM_COLUMNS_B, MPI_DOUBLE, 0, MPI_COMM_WORLD);
        if (rank > 0) {
            MPI_Recv(&low_bound, 1, MPI_INT, 0, MASTER_TO_SLAVE_TAG, MPI_COMM_WORLD, &status);
            MPI_Recv(&upper_bound, 1, MPI_INT, 0, MASTER_TO_SLAVE_TAG + 1, MPI_COMM_WORLD, &status);
            MPI_Recv(&mat_a[low_bound][0], (upper_bound - low_bound) * NUM_COLUMNS_A, MPI_DOUBLE, 0, MASTER_TO_SLAVE_TAG + 2, MPI_COMM_WORLD, &status);
            for (i = low_bound; i < upper_bound; i++) {
                for (j = 0; j < NUM_COLUMNS_B; j++) {
                    rtemp = 0;
                    for (k = 0; k < NUM_ROWS_B; k++) {
                         rtemp += (mat_a[i][k] * mat_b[k][j]);
                    }
                    mat_result[i][j] = rtemp;
                }
            }
            MPI_Isend(&low_bound, 1, MPI_INT, 0, SLAVE_TO_MASTER_TAG, MPI_COMM_WORLD, &request);
            MPI_Isend(&upper_bound, 1, MPI_INT, 0, SLAVE_TO_MASTER_TAG + 1, MPI_COMM_WORLD, &request);
            MPI_Isend(&mat_result[low_bound][0], (upper_bound - low_bound) * NUM_COLUMNS_B, MPI_DOUBLE, 0, SLAVE_TO_MASTER_TAG + 2, MPI_COMM_WORLD, &request);
        }
        if (rank == 0) {
            for (i = 1; i < size; i++) {
                MPI_Recv(&low_bound, 1, MPI_INT, i, SLAVE_TO_MASTER_TAG, MPI_COMM_WORLD, &status);
                MPI_Recv(&upper_bound, 1, MPI_INT, i, SLAVE_TO_MASTER_TAG + 1, MPI_COMM_WORLD, &status);
                MPI_Recv(&mat_result[low_bound][0], (upper_bound - low_bound) * NUM_COLUMNS_B, MPI_DOUBLE, i, SLAVE_TO_MASTER_TAG + 2, MPI_COMM_WORLD, &status);
            }
            end_time = MPI_Wtime();
            avr_time += end_time - start_time;
        }
    }
    MPI_Finalize();
    if (rank==0)
        printf("[%d, %d] * [%d, %d] : %f\n", NUM_ROWS_A, NUM_COLUMNS_A,
            NUM_ROWS_B, NUM_COLUMNS_B, avr_time/3);
    return 0;
}
void makeAB()
{
    for (i = 0; i < NUM_ROWS_A; i++) {
        for (j = 0; j < NUM_COLUMNS_A; j++) {
            mat_a[i][j] = i + j;
        }
    }
    for (i = 0; i < NUM_ROWS_B; i++) {
        for (j = 0; j < NUM_COLUMNS_B; j++) {
            mat_b[i][j] = i*j;
        }
    }
}
