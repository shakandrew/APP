#define MASTER_TO_SLAVE_TAG 1
#define SLAVE_TO_MASTER_TAG 8
void makeAB();
void printArray();
int rank;
int size;
int i, j, k, rtemp, i1;
double mat_a[NUM_ROWS_A][NUM_COLUMNS_A];
double mat_b[NUM_ROWS_B][NUM_COLUMNS_B];
double mat_result[NUM_ROWS_A][NUM_COLUMNS_B];
struct timeval start, stop;
int low_bound, upper_bound;
int portion;
double avr_time;
int rtemp;
int main(int argc, char *argv[])
{
    makeAB();
    double secs = 0;
    gettimeofday(&start, NULL);
    for (i = 0; i < NUM_ROWS_A; i++) {
        for (j = 0; j < NUM_COLUMNS_B; j++) {
            rtemp = 0;
            for (k = 0; k < NUM_ROWS_B; k++) {
                rtemp += (mat_a[i][k] * mat_b[k][j]);
            }
            mat_result[i][j] = rtemp;
        }
    }
    gettimeofday(&stop, NULL);
    secs = (double)(stop.tv_usec - start.tv_usec) / 1000000 + (double)(stop.tv_sec - start.tv_sec);
    printf("[%d, %d] * [%d, %d] : %f\n", NUM_ROWS_A, NUM_COLUMNS_A,
        NUM_ROWS_B, NUM_COLUMNS_B, secs);
    return 0;
}
void makeAB()
{
    for (i = 0; i < NUM_ROWS_A; i++) {
        for (j = 0; j < NUM_COLUMNS_A; j++) {
            mat_a[i][j] = i + j;
        }
    }
    for (i = 0; i < NUM_ROWS_B; i++) {
        for (j = 0; j < NUM_COLUMNS_B; j++) {
            mat_b[i][j] = i*j;
        }
    }
}
